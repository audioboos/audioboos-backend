name: Build and publish container

on:
  push:
    branches: [ trunk ]


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}

    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 #fetch-depth is needed for GitVersion

      #install GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: '5.x'
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.11
        id: gitversion # step id used as reference for output values
      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.SemVer }}"   
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTag }}"   
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"      

      #build the docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      #      - name: Setup tmate session
      #        uses: mxschmitt/action-tmate@v3

      - name: Log-in to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push container image
        run: |
          IMAGE_ID=$(echo ghcr.io/${{ github.repository }} | tr '[A-Z]' '[a-z]')
          
          # when the branch is trunk, replace trunk with latest
          $VERSION=${{ steps.gitversion.outputs.SemVer }}
          [ "$VERSION" == "trunk" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          # Build and Publish container image
          docker buildx build --file docker/Dockerfile --push \
            --build-arg ASSEMBLY-VERSION=${{ steps.gitversion.outputs.assemblySemFileVer }} \
            --build-arg FILE_VERSION=${{ steps.gitversion.outputs.assemblySemFileVer }} \
            --build-arg INFORMATIONAL_VERSOIN=${{ steps.gitversion.outputs.Sha }} \
            --tag $IMAGE_ID:$VERSION \
            --progress=plain \
            --platform linux/amd64,linux/arm/v7,linux/arm64 .
